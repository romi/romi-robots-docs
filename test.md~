
## **Short overview of the Plant Phenotyping tools**

The Plant Phenotyping tools** **perform 3D analyses of plants. It combines the following components:



*   The **Plant 3D Imager**: A physical imaging station that uses an RGB camera to collect images of an individual plant.
*   The **Plant 3D Analyzer/Somethinger**: A powerful data processing pipeline that builds several types of 3D representations of plants. 
*   The **Virtual Plant 3D Imager**: A virtual version of the Plant 3D Imager. It uses a virtual 3D plant model to generate synthetic images. These images are used to evaluate the Plant 3D Analyzer or to train neural networks.  
*   The **Plant 3D Explorer**: The explorer allows to visualize the 3D data and the analysis results.

A typical workflow would look as follows:



1. The user puts his/her plant inside the scanner and runs an image **acquisition** using the Plant 3D Imager. This results in a set of images for every plant. 
2. These images are uploaded to a **central database**. [TODO: what database?]
3. The user executes a **processing pipeline** to reconstruct and quantify the plant’s architecture. She can choose among a set of predefined setups and algorithms. The processing may be performed on a remote server.  [TODO: is it currently practically feasible to define new pipelines?]
4. Finally the user can **visualize** the image acquisitions, the 3D reconstructions, and the quantitative data by connecting to the Plant 3D Explorer using his/her computer.

The Plant 3D Analyzer has been tested mostly on _Arabidopsis thaliana_ plants to automatically extract the angles and the internode lengths between the fruits of the main inflorescence stem. 


# **Installing the Plant Phenotyping software**


## **General requirements**


### **To clone the software repositories**

To clone the git repository, you will need:



*   git
*   ca-certificates

Start with these system dependencies:


```
sudo apt-get install git ca-certificates
```



### **Downloading from URLs**

Sometimes the documentation will provides commands with `wget` to download archives or other types of files, here is the command line to install it if you do not have it:


```
sudo apt install wget
```



## **List of sources**

For the ROMI projects, several libraries have been developed in various languages and made available on GitHub. Here is a list of the important repositories for the plant scanner project:



*   romidata: the database module is accessible[ here](https://github.com/romi/romidata);
*   romiscanner: the scanner interface and the virtual scanner is accessible[ here](https://github.com/romi/romiscanner);
*   romiscan: the computer vision algorithms to reconstruct the plants is accessible[ here](https://github.com/romi/romiscan);
*   romiseg: the ML-based plant segmentation models is accessible[ here](https://github.com/romi/romiseg);
*   3d-plantviewer: the Node JS web viewer for plant scan, reconstruction and quantification is accessible[ here](https://github.com/romi/3d-plantviewer)

Additionally we also have:



*   romicgal: some[ CGAL](https://www.cgal.org/) bindings used for skeletonization & meshing is accessible[ here](https://github.com/romi/romicgal)
*   bldc_featherwing: the controller for BLDC motor on a feather wing is accessible[ here](https://github.com/romi/bldc_featherwing)


## **Creating isolated Python environments**

Most of the Plant Phenotyping software is distributed as Python3 libraries. These are generally installed using a tool called pip. This tool downloads and installs the requested libraries in a shared directory. However, it is highly recommended to separate different Python work environments to avoid conflicts between different versions of the libraries. The standard approach is to use a virtual environment for managing these libraries.  

Here is a quote from the official Python documentation:

_venv (for Python 3) and virtualenv (for Python 2) allow you to manage separate package installations for different projects. They essentially allow you to create a "virtual" isolated Python installation and install packages into that virtual installation. When you switch projects, you can simply create a new virtual environment and not have to worry about breaking the packages installed in the other environments. _

As often, there are several options to choose from. 

Python3’s default solution uses the venv module. You can find an introduction to virtual environments here:[https://realpython.com/python-virtual-environments-a-primer/](https://realpython.com/python-virtual-environments-a-primer/) and the official documentation here:[https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/).

However, we will be using conda by default and, in particular, miniconda3. We recommend using conda for some packages, like openalea.lpy, that are available through conda but not through pip/venv and that can be tricky to install from sources!

MORE INFO ON WHICH OPTION TO CHOOSE IN WHAT SITUATION

We will discuss each of these options in detail in the following sections.

Warning

Some of the ROMI libraries have dependencies relying on specific Python versions. Make sure that the isolated environment you create matches these requirements!


## **Isolated environments with venv**


### **Requirements**

Python 3 & pip are required. On Debian-like OS, use the following command to install them:


```
sudo apt-get install python3 python3-pip
```


For more details & explanations, follow[ this](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/#) official guide to learn how to install packages using pip and virtual environments.


### **Environment creation**

To create a new environment, named plant_scanner, use python3 and the venv module:


```
python3 -m venv plant_scanner
```


Note

This will create a plant_scanner folder in the current working directory and place the "environment files" there! We thus advise to gather all your environment in a common folder like ~/envs.

[Can we do : 

mkdir ~/envs

python3 -m venv ~/envs/plant_scanner

]

To activate it:


```
source ~/envs/plant_scanner/bin/activate
```



### **Usage**

Now you can easily install Python packages, for example NumPy, as follow:


```
pip3 install numpy
```


Note

To leave the virtual environment, you can either execute the command deactivate or simply close the terminal and open a new one.

Once the environment is set up, you can use it to install the ROMI software & dependencies.


## **Isolated environments with miniconda**


### **Requirements**

In this case you do not need Python to be installed on your system, all you need is to install miniconda3. On Debian-like OS, you can download the latest miniconda3 version with:


```
wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
```


The install script can be executed using the following command:


```
bash Miniconda3-latest-Linux-x86_64.sh
```


For more details & explanations, follow[ this](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/#) official guide to learn how to install miniconda.


### **Environment creation**

To create a new conda environment, named plant_scanner with Python 3.7:


```
conda create --name plant_scanner python==3.7
```


To activate it:


```
conda activate plant_scanner
```



### **Usage**

Now you can now easily install Python packages, for example NumPy, as follow:


```
conda install numpy
```


Note

Use the command conda deactivate or close the terminal to leave the virtual environment.

You can now use this environment to install the ROMI software & dependencies.


## **Using Docker image**

...


# **Create a ROMI database to host, receive & serve plant scans**

To follow this guide you should have a conda environment, see[ here](http://127.0.0.1:8000/Scanner/install/create_env/). For the sake of clarity it will be called plantscans_db.

Note

Since this is still under development, the packages are installed in "editable mode" with the -e option.

Note

If you do not want the hassle of having to create an environment and install python libraries, there is a pre-built docker image, with usage instructions[ here](http://127.0.0.1:8000/Scanner/docker/romidb_docker/).


## **Install romidata sources**

Activate your plantscans_db environment!


```
conda activate plantscans_db
```


To create an active ROMI database, you have to install the romidata package:


```
git clone https://github.com/romi/romidata.git && \
cd romidata && \
git checkout dev && \
python3.7 -m pip install setuptools setuptools-scm && \
python3.7 -m pip install luigi pillow && \
python3.7 -m pip install flask flask-restful flask-cors && \
python3.7 -m pip install .
```



## **Initialize a ROMI database**

The FSDB class from the romidata module is used to manage a local file system for data storage. A database is any folder which contains a file named romidb.

To create an empty database, just create a new folder and an empty file named romidb in it. For example:

mkdir /data/romi_db

touch /data/romi_db/romidb

Then define its location in an environment variable DB_LOCATION:

export DB_LOCATION='/data/ROMI/DB'

Note

To permanently set this directory as the location of the DB, add it to your ~/.bashrc file.

echo 'export DB_LOCATION=/data/ROMI/DB' >> ~/.bashrc 


## **Serve the REST API**

Then you can start the REST API with romi_scanner_rest_api:

romi_scanner_rest_api

You should see something like:

n scans = 2

 * Serving Flask app "romi_scanner_rest_api" (lazy loading)

 * Environment: production

   WARNING: This is a development server. Do not use it in a production deployment.

   Use a production WSGI server instead.

 * Debug mode: off

 * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)

To access the REST API, open your favorite browser and use URLs to access:



*   the list of all scans:[ http://0.0.0.0:5000/scans](http://0.0.0.0:5000/scans)
*   the '2018-12-17_17-05-35' dataset:[ http://0.0.0.0:5000/scans/2018-12-17_17-05-35](http://0.0.0.0:5000/scans/2018-12-17_17-05-35)

You should see JSON formatted text.

**Troubleshooting**: When starting the REST API with romi_scanner_rest_api, if you get an error message about this executable not being found, it may be missing from the $PATH environement variable. Add it with:

export PATH=$PATH:"/home/$USER/.local/bin"

Note

To permanently set this in your bash terminal, add it to your ~/.bashrc file.

echo 'export PATH=$PATH:/home/$USER/.local/bin' >> ~/.bashrc
