digraph G {
    node[shape=record width=3]
    subgraph level0{
        input [label="Multiple RGB images (PNG|JPEG)" shape=folder];
    }
    subgraph level0{
        undistorted_task [label="{<f0> Undistorted|<f1> romiscan.tasks.proc2d|<f2> Undistorts images using computed\n intrinsic camera parameters.\n}" shape=Mrecord];
        undistorted_out [label="Undistorted images (PNG)" shape=folder];
    }
    input -> undistorted_task;
    subgraph level0{
        colmap_task [label="{<f0> Colmap|<f1> romiscan.tasks.colmap|<f2> Camera poses estimation.\n}" shape=Mrecord];
        colmap_out_img_md [label="Images metadata (JSON)\n images.json" shape=folder];
        colmap_out_cam [label="Camera poses (JSON)\n cameras.json" shape=folder];
        colmap_out_pts [label="Points in 3D (JSON)\n points3D.json" shape=folder];
        colmap_out_ply [label="PointCloud (PLY)\n sparse.ply (, dense.ply)" shape=folder];
    }
    input -> colmap_task;
    colmap_task -> colmap_out_cam;
    colmap_task -> {colmap_out_img_md colmap_out_pts colmap_out_ply} [constraint=false];
    undistorted_out -> mask_task;
    #
    # algorithmic pipeline
    subgraph cluster_level0{
        label="Algorithmic Pipeline";
        mask_task [label="{<f0> Mask|<f1> romiscan.tasks.proc2d|<f2> 'Plant pixels' detection.\n}" shape=Mrecord];
        mask_out [label="Grayscale or Binary masks (PNG)" shape=folder];
        voxel_task [label="{<f0> Voxel|<f1> romiscan.tasks.cl|<f2> Computes a volume from backprojection\n of 2D segmented images.\n}" shape=Mrecord];
        voxel_out [label="Binary Voxel (NPZ)" shape=folder];
        pointcloud_task [label="{<f0> PointCloud|<f1> romiscan.tasks.proc3d|<f2> Computes a point cloud from\n volumetric voxel data.\n}" shape=Mrecord];
        pointcloud_out [label="Plant pointcloud (PLY)" shape=folder];
        triangle_mesh_task [label="{<f0> TriangleMesh|<f1> romiscan.tasks.proc3d|<f2> Triangulates input point cloud.\n}" shape=Mrecord];
        triangle_mesh_out [label="Mesh (PLY)" shape=folder];
        skeleton_task [label="{<f0> Skeletonization|<f1> romiscan.tasks.proc3d|<f2> Mesh skeletonization.\n}" shape=Mrecord];
        skeleton_out [label=" ? (JSON)" shape=folder];
        tree_graph_task [label="{<f0> TreeGraph|<f1> romiscan.tasks.arabidopsis|<f2> Plant skeleton to TreeGraph structure.\n}" shape=Mrecord];
        tree_graph_out [label=" TreeGraph (JSON)" shape=folder];
    }
    input -> mask_task;
    colmap_out_cam -> voxel_task;
    mask_out -> voxel_task;
    voxel_out -> pointcloud_task;
    pointcloud_out -> triangle_mesh_task;
    triangle_mesh_out -> skeleton_task;
    skeleton_out -> tree_graph_task;
    mask_task -> mask_out;
    voxel_task -> voxel_out;
    pointcloud_task -> pointcloud_out;
    triangle_mesh_task -> triangle_mesh_out;
    skeleton_task -> skeleton_out;
    tree_graph_task -> tree_graph_out;
    #
    # Machine Learning Pipeline
    subgraph cluster_level1{
        label="Machine Learning Pipeline";
        segmentation_task [label="{<f0> Segmentation2D|<f1> romiscan.tasks.proc2d|<f2> Compute masks using\n trained deep learning models.\n}" shape=Mrecord];
        segmentation_out [label="Masks (PNG)" shape=folder];
        mvoxel_task [label="{<f0> Voxels|<f1> romiscan.tasks.cl|<f2> Computes a volume from backprojection\n of 2D segmented images.\n}" shape=Mrecord];
        mvoxel_out [label="Binary Voxel (NPZ)" shape=folder];
        lpointcloud_task [label="{<f0> PointCloud|<f1> romiscan.tasks.proc3d|<f2> Computes a point cloud from\n volumetric voxel data.\n}" shape=Mrecord];
        lpointcloud_out [label="Plant pointcloud (PLY)" shape=folder];
        clutered_mesh_task [label="{<f0> ClusteredMesh|<f1> romiscan.tasks.proc3d|<f2> Triangulates input point cloud.\n}" shape=Mrecord];
        clutered_mesh_out [label="Mesh (PLY)" shape=folder];
    }
    # ML pipeline:
    undistorted_task -> undistorted_out;
    undistorted_out -> segmentation_task;
    colmap_out_cam -> segmentation_task;
    segmentation_out -> mvoxel_task;
    mvoxel_out -> lpointcloud_task;
    lpointcloud_out -> clutered_mesh_task;
    segmentation_task -> segmentation_out;
    mvoxel_task -> mvoxel_out;
    lpointcloud_task -> lpointcloud_out;
    clutered_mesh_task -> clutered_mesh_out;
}